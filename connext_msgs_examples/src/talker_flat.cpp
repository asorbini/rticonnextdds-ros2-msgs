// Copyright 2014 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// (c) 2021 Copyright, Real-Time Innovations, Inc.  All rights reserved.
//
// RTI grants Licensee a license to use, modify, compile, and create derivative
// works of the Software.  Licensee has the right to distribute object form
// only for use with RTI products.  The Software is provided "as is", with no
// warranty of any type, including any warranty for fitness for any purpose.
// RTI is under no obligation to maintain or support the Software.  RTI shall
// not be liable for any incidental or consequential damages arising out of the
// use or inability to use the software.

#include <chrono>
#include <cstdio>
#include <memory>
#include <utility>

#include "rclcpp/rclcpp.hpp"
#include "rclcpp_components/register_node_macro.hpp"

#include "connext_msgs_examples/visibility_control.h"

// Include RTI Connext DDS "modern C++" API
#include <dds/dds.hpp>
// Include type support code generated by rtiddsgen
#include "ros2/flat/std_msgs/msg/String.hpp"

using namespace std::chrono_literals;
using namespace dds::core;
using namespace ros2::flat::std_msgs::msg;

namespace rti { namespace connext_msgs_examples
{
// Create a Talker class that subclasses the generic rclcpp::Node base class.
// The main function below will instantiate the class as a ROS node.
// Use Connext's Modern C++ API to create a DataWriter to publish messages.
class DdsTalkerFlat : public rclcpp::Node
{
public:
  CONNEXT_MSGS_EXAMPLES_PUBLIC
  explicit DdsTalkerFlat(const rclcpp::NodeOptions & options)
  : Node("talker_flat", options)
  {
    // Create a function for when messages are to be sent.
    setvbuf(stdout, NULL, _IONBF, BUFSIZ);
    auto publish_message =
      [this]() -> void
      {
        String * const msg = writer_.extensions().get_loan();
        // String fields are converted into fixed-size char arrays.
        // By default, unbounded strings are truncated to a length of 255
        // When using flat data, we must access the underlying serialized 
        // object via an Offset object returned by the root() method.
        // Arrays must be accessed via accessor methods.
        snprintf(msg->root().data().get_elements(),  255, "Hello World: %lu", count_++);
        RCLCPP_INFO(this->get_logger(), "Publishing: '%s'",
          msg->root().data().get_elements());
        writer_.write(*msg);
      };
    // The DomainParticipant is created on domain 0 by default
    auto participant = dds::domain::find(0);
    assert(null != participant);
    // Create a DataWriter for topic "rt/chatter"
    dds::pub::Publisher publisher(participant);
    dds::topic::Topic<String> topic(participant,
      "rt/chatter", "dds_::String_");
    rti::core::policy::Property props;
    // Required to properly support unbounded types: size of the pre-allocated
    // sample memory pool. Sample's beyond this size will be dynamically allocated.
    props.set({"dds.data_writer.history.memory_manager.fast_pool.pool_buffer_max_size", "1024"}, false);
    auto writer_qos = publisher.default_datawriter_qos(); 
    writer_qos << props;
    writer_qos << policy::Reliability::Reliable();
    writer_qos << policy::History(policy::HistoryKind::KEEP_LAST, 7);
    writer_ = dds::pub::DataWriter<String>(publisher, topic, writer_qos);

    // Use a timer to schedule periodic message publishing.
    timer_ = this->create_wall_timer(1s, publish_message);
  }

private:
  size_t count_ = 1;
  dds::pub::DataWriter<String> writer_{nullptr};
  rclcpp::TimerBase::SharedPtr timer_;
};

}  // namespace connext_nodes_cpp
}  // namespace rti

RCLCPP_COMPONENTS_REGISTER_NODE(rti::connext_msgs_examples::DdsTalkerFlat)
