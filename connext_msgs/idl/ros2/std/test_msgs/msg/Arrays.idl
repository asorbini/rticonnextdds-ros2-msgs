// generated from rosidl_adapter/resource/msg.idl.em
// with input from test_msgs/msg/Arrays.msg
// generated code does not contain a copyright notice

#ifndef test_msgs_msg_BasicTypes_idl
#define test_msgs_msg_BasicTypes_idl
#include "ros2/std/test_msgs/msg/BasicTypes.idl"
#endif  // test_msgs_msg_BasicTypes_idl
#ifndef test_msgs_msg_Constants_idl
#define test_msgs_msg_Constants_idl
#include "ros2/std/test_msgs/msg/Constants.idl"
#endif  // test_msgs_msg_Constants_idl
#ifndef test_msgs_msg_Defaults_idl
#define test_msgs_msg_Defaults_idl
#include "ros2/std/test_msgs/msg/Defaults.idl"
#endif  // test_msgs_msg_Defaults_idl

module ros2 { module std { module test_msgs {
  module msg {
    
    
    
    
    
    
    
    
    
    
    
    
    
    typedef ros2::std::test_msgs::msg::BasicTypes test_msgs__msg__BasicTypes;
    typedef test_msgs__msg__BasicTypes test_msgs__msg__BasicTypes__3[3];
    typedef ros2::std::test_msgs::msg::Constants test_msgs__msg__Constants;
    typedef test_msgs__msg__Constants test_msgs__msg__Constants__3[3];
    typedef ros2::std::test_msgs::msg::Defaults test_msgs__msg__Defaults;
    typedef test_msgs__msg__Defaults test_msgs__msg__Defaults__3[3];
    

    @final
    
    struct Arrays {
      boolean bool_values[3];

      octet byte_values[3];

      uint8 char_values[3];

      float float32_values[3];

      double float64_values[3];

      int8 int8_values[3];

      uint8 uint8_values[3];

      int16 int16_values[3];

      uint16 uint16_values[3];

      int32 int32_values[3];

      uint32 uint32_values[3];

      int64 int64_values[3];

      uint64 uint64_values[3];

      string string_values[3];

      test_msgs__msg__BasicTypes__3 basic_types_values;

      test_msgs__msg__Constants__3 constants_values;

      test_msgs__msg__Defaults__3 defaults_values;

      @default (value="(False, True, False)")
      boolean bool_values_default[3];

      @default (value="(0, 1, 255)")
      octet byte_values_default[3];

      @default (value="(0, 1, 127)")
      uint8 char_values_default[3];

      @default (value="(1.125, 0.0, -1.125)")
      float float32_values_default[3];

      @default (value="(3.1415, 0.0, -3.1415)")
      double float64_values_default[3];

      @default (value="(0, 127, -128)")
      int8 int8_values_default[3];

      @default (value="(0, 1, 255)")
      uint8 uint8_values_default[3];

      @default (value="(0, 32767, -32768)")
      int16 int16_values_default[3];

      @default (value="(0, 1, 65535)")
      uint16 uint16_values_default[3];

      @default (value="(0, 2147483647, -2147483648)")
      int32 int32_values_default[3];

      @default (value="(0, 1, 4294967295)")
      uint32 uint32_values_default[3];

      @default (value="(0, 9223372036854775807, -9223372036854775808)")
      int64 int64_values_default[3];

      @default (value="(0, 1, 18446744073709551615)")
      uint64 uint64_values_default[3];

      @default (value="('', 'max value', 'min value')")
      string string_values_default[3];

      

      int32 alignment_check;
    };
  };
}; }; };
